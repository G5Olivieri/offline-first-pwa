# Default values for pos-frontend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 2

image:
  repository: pos-frontend
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  fsGroup: 101
  runAsNonRoot: true
  runAsUser: 101

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 101

service:
  type: ClusterIP
  port: 80
  targetPort: 8080

ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
    - host: pos-frontend.local
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: pos-frontend-tls
      hosts:
        - pos-frontend.local

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi

autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - pos-frontend
        topologyKey: kubernetes.io/hostname

# Environment variables
env:
  NODE_ENV: production

# ConfigMap data
config:
  nginx.conf: |
    server {
        listen 8080;
        server_name localhost;
        root /usr/share/nginx/html;
        index index.html;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "no-referrer-when-downgrade" always;
        add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied expired no-cache no-store private auth;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/javascript
            application/xml+rss
            application/json;

        # Handle client routing
        location / {
            try_files $uri $uri/ /index.html;

            # Cache static assets
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Service worker
        location /sw.js {
            add_header Cache-Control "no-cache";
            proxy_cache_bypass $http_pragma;
            proxy_cache_revalidate on;
            expires off;
            access_log off;
        }

        # Manifest and other PWA files
        location ~* \.(webmanifest|json)$ {
            add_header Cache-Control "no-cache";
        }
    }

# Probes configuration
probes:
  liveness:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

  readiness:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    failureThreshold: 3

# PodDisruptionBudget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# NetworkPolicy
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      ports:
      - protocol: TCP
        port: 8080

# Istio Service Mesh Configuration
istio:
  enabled: true

  # Istio Gateway Configuration
  gateway:
    annotations: {}
    selector:
      istio: ingressgateway
    servers:
      - port:
          number: 80
          name: http
          protocol: HTTP
        hosts:
          - pos-frontend.localhost
      - port:
          number: 443
          name: https
          protocol: HTTPS
        hosts:
          - pos-frontend.localhost
        tls:
          mode: SIMPLE
          credentialName: pos-frontend-tls-secret

  # Istio VirtualService Configuration
  virtualService:
    annotations: {}
    hosts:
      - pos-frontend.localhost
    gateways:
      - pos-frontend-gateway
    http:
      - match:
          - uri:
              prefix: /
        route:
          - destination:
              host: pos-frontend
              port:
                number: 80
        timeout: 30s
        retries:
          attempts: 3
          perTryTimeout: 10s
        corsPolicy:
          allowOrigins:
            - exact: https://pos-frontend.localhost
            - exact: http://pos-frontend.localhost
          allowMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - OPTIONS
          allowHeaders:
            - Content-Type
            - Authorization
            - X-Requested-With
          allowCredentials: true
          maxAge: 86400s

  # Istio DestinationRule Configuration
  destinationRule:
    annotations: {}
    host: pos-frontend
    trafficPolicy:
      loadBalancer:
        simple: LEAST_CONN
      connectionPool:
        tcp:
          maxConnections: 100
          connectTimeout: 30s
        http:
          http1MaxPendingRequests: 50
          http2MaxRequests: 100
          maxRequestsPerConnection: 10
          maxRetries: 3
          idleTimeout: 60s
          h2UpgradePolicy: UPGRADE
      outlierDetection:
        consecutiveGatewayErrors: 5
        consecutive5xxErrors: 5
        interval: 30s
        baseEjectionTime: 30s
        maxEjectionPercent: 50
        minHealthPercent: 30
    subsets:
      - name: v1
        labels:
          version: v1
        trafficPolicy:
          loadBalancer:
            simple: ROUND_ROBIN

# Monitoring Configuration
monitoring:
  serviceMonitor:
    enabled: true
    annotations: {}
    labels:
      app: pos-frontend
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    relabelings: []
    metricRelabelings: []
